getwd()
Sys.which("make")
install('astsa')
intall.package('astsa')
install.packages('astsa')
install.packages('astsa')
install.packages('astsa')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages('astsa')
5*5+2
w = rnorm(500, 0, 1)
w
install.packages('astsa')
view(w)
data("iris")
force(iris)
View(iris)
View(iris)
View(iris)
View(w)
v = filter(w, sides = 2, filter = rep(1/4, 3))
View(iris)
View(v)
a=3
par(mfrow=c(2,1))
plot.ts(w, main='whilte noises')
plot.ts(v, ylim = c(-3, 3), main='moving average')
v = filter(w, sides = 2, filter = rep(1/3, 3))
par(mfrow=c(2,1))
plot.ts(w, main='whilte noises')
plot.ts(v, ylim = c(-3, 3), main='moving average')
View(v)
head(v)
help(filter)
x = 1:100
help(rep)
filter(x, rep(1, 3))
View(TestVector)
View(v)
ls
help View()
help(view)
"View"
w = rnorm(10, 0, 1)
w
y = list(1, 2, 3)
View(y)
View(y)
x= data(rnorm(10, 0, 1))
data(x)
x
data(w)
as.data.frame(w)
y = as.data.frame(w)
View(y)
View(y)
y = as.data.frame(v)
View(y)
View(y)
jj
View(jj)
rep(1/3, 3)
c(1, -.9)
help(filter)
w = rnorm(550, 0, 1)
x = filter(2, flter=c(1, -0.9), method = 'recursive')[-(1:50)]
x = filter(2, flter=c(1, -.9), method = 'recursive')[-(1:50)]
x = filter(w, flter=c(1, -0.9), method = 'recursive')[-(1:50)]
x = filter(w, filter=c(1, -0.9), method = 'recursive')[-(1:50)]
plot.ts(x, main='autoregression')
plot(x)
plot(x, type='p')
set.seed(154)
w = rnorm(200)
x=cumsum(w)
help(lines)
w = rnorm(200)
wd = w + 0.2
xd = cumsum(wd)
plot.ts(xd, ylim=c(-5, 55))
plot.ts(xd, ylim=c(-5, 55))
set.seed(154)
w = rnorm(200)
x=cumsum(w)
wd = w + 0.2
xd = cumsum(wd)
plot.ts(xd, ylim=c(-5, 55))
lines = (x, col=4)
lines(x, col=4)
lines(x, col='blue')
ablin(h=0, col=4, lty=2)
abline(h=0, col=4, lty=2)
abline(h=0, col=4, lty='--)
sd f
abline(h=0, col=4, lty='--')
;
;
abline(h=0, col=4, lty='--')
help(lty)
help(abline)
abline(a=0, b=0.2, lty=2)
help("par")
cs = 2*cos(2*pi*1:500/50+0.6*pi)
w=rnorm(500, 0, 1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
plot(cs, main=expression(2*cos(2*pi*t/50+0.6pi)))
plot.ts(cs, main=expression(2*cos(2*pi*t/50+0.6pi)))
plot.ts(cs, main=expression(2*cos(2*pi*t/50+0.6pi)))
plot.ts(cs)
expression(2*cos(x))
main=expression(2*cos(2*pi*t/50+0.6pi))
plot.ts(cs, main=expression(2*cos(2*pi*t/50+0.6*pi)))
plot.ts(cs+w, main=expression(2*cos(2*pi*t/50+0.6*pi)))
plot.ts(cs+5*w, main=expression(2*cos(2*pi*t/50+0.6*pi)))
library(astsa)
lag1.plot(soi, 12)
par(mfrow=c(3,1))
tsplot(cmort, main="Cardiovascular Mortality", col=6, type="o", pch=19, ylab="")
tsplot(tempr, main="Temperature", col=4, type="o", pch=19, ylab="")
tsplot(part, main="Particulates", col=2, type="o", pch=19, ylab="")
library('astsa')
(r = round( acf1(soi, 6, plot=FALSE), 2)) # sample acf values
acf1(soi, 6)
tsplot(lag(soi,-1), soi, col=4, type='p', xlab='lag(soi,-1)')
help(tsplot)
soi
a = soi
lag(soi,-1)
x = as.data.frame(lag(soi,-1))
View(x)
View(x)
y =  as.data.frame(soi)
View(y)
View(y)
help(lag)
a = [1, 2, 3]
View(soi)
soi
View(soi)
View(y)
View(iris)
help(rbinom)
x1 = sample(c(-1,1), 11, replace=TRUE)
help("sample")
x1 = sample(c(-1,1), 11)
x <- 1:12
sample(x)
sample(x, replace = TRUE)
set.seed(666)
x1 = sample(c(-1,1), 11, replace=TRUE)  # simulated sequence of coin tosses
x2 = sample(c(-1,1), 101, replace=TRUE)
y1 = 5 + filter(x1, sides=1, filter=c(1,-.7))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.7))[-1]
help("filter")
filter(x1, sides=1, filter=c(1,-.7))
filter(x1, sides=1, filter=c(1,-.7))[1]
tsplot(y1, type="s", col=4, xaxt="n", yaxt="n")
tsplot(y1, type="p", col=4, xaxt="n", yaxt="n")
tsplot(y1, type="l", col=4, xaxt="n", yaxt="n")
par(mar=rep(1,4))
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4,
ticktype="detailed", xlab="rows", ylab="cols", zlab="temperature")
dev.new()
tsplot(rowMeans(soiltemp), xlab="row", ylab="Average Temperature")
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4,
ticktype="detailed", xlab="rows", ylab="cols", zlab="temperature")
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4,
ticktype="detailed", xlab="rows", ylab="cols", zlab="temperature")
doc par()
help("par")
summary(fit <- lm(chicken~time(chicken))) # regress price on time
tsplot(chicken, ylab="cents per pound", col=4, lwd=2)
abline(fit)      # add the fitted regression line to the plot
par(mfrow=c(3,1))
tsplot(cmort, main="Cardiovascular Mortality", col=6, type="o", pch=19, ylab="")
tsplot(tempr, main="Temperature", col=4, type="o", pch=19, ylab="")
tsplot(part, main="Particulates", col=2, type="o", pch=19, ylab="")
dev.new()
tsplot(cbind(cmort, tempr,part), spag=TRUE, ylab="", col=c(6,4,2))
legend("topright", legend=c("Mortality", "Temperature", "Pollution"), lty=1, lwd=2, col=c(6,4,2), bg="white")
time(cmort)
1/12
cmort
View(cmort)
1/52
##-- scatterplot matrix
dev.new()
panel.cor <- function(x, y, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y), 2)
text(0.5, 0.5, r, cex = 1.75)
}
pairs(cbind(Mortality=cmort, Temperature=tempr, Particulates=part), col=4, lower.panel=panel.cor)
#  Regression
temp  = tempr-mean(tempr)  # center temperature
temp2 = temp^2             # square it
trend = time(cmort)        # time
fit = lm(cmort~ trend + temp + temp2 + part, na.action=NULL)
summary(fit)       # regression results
summary(aov(fit))  # ANOVA table   (compare to next line)
summary(aov(lm(cmort~cbind(trend, temp, temp2, part)))) # Table 2.1
num = length(cmort)                                     # sample size
AIC(fit)/num - log(2*pi)                                # AIC
BIC(fit)/num - log(2*pi)                                # BIC
(AICc = log(sum(resid(fit)^2)/num) + (num+5)/(num-5-2)) # AICc
library('astsa')
help(na)
help("fitted")
help('fit')
help("fit")
help(lm)
rec
library('astsa')
plot(soi)
liens(lowess(soi, f=0.05), lwd=2, col=4)
lines(lowess(soi, f=0.05), lwd=2, col=4)
help(smooth.spline)
list(order=c(0,0,1),ma=0.9)
sqrt(4)
sqrt(1130)
33.6/5
x<-8
x
x=8
x
c(1:5)
load iris
iris3
y=c(80, 87, 98, 73, 100)
barplot(y, col=c(1:5))
barplot(y, xlab = '类别', ylab = '计数', col=c(1:5))
myString = 'hello world'
print(myString)
R
q
q()
std(12, 12)
sd(12, 12)
sd(12, 12, 10.2, 12, 18.2, 10.2, 12, 18.2, 18.2, 10.2)
sd(1:5)
sd(12, 10.2)
arr = c(12, 12, 10.2, 12, 18.2, 10.2, 12, 18.2, 18.2, 10.2)
sd(arr)
mean(arr)
